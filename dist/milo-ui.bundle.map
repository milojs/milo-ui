{
  "version": 3,
  "sources": [
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/Button.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/Combo.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/ComboList.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/Date.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/DropTarget.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/FoldTree.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/Group.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/Hyperlink.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/Image.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/Input.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/InputList.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/List.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/ListItem.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/RadioGroup.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/Select.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/SuperCombo.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/Text.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/Textarea.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/Time.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/Wrapper.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/bootstrap/Alert.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/bootstrap/Dialog.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/components/bootstrap/Dropdown.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/milo-ui.js",
    "/Users/evgenypoberezkin/Work/CC/milo-ui/lib/use_components.js"
  ],
  "names": [],
  "mappingstbhIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjnxjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxhoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvp
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "'use strict';\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components;\n\n\nvar MLButton = Component.createComponentClass('MLButton', {\n    events: undefined,\n    dom: {\n        cls: 'ml-ui-button'\n    }\n});\n\ncomponentsRegistry.add(MLButton);\n\nmodule.exports = MLButton;\n\n_.extendProto(MLButton, {\n    disable: MLButton$disable,\n    isDisabled: MLButton$isDisabled\n});\n\n\nfunction MLButton$disable(disable) {\n    this.el.disabled = disable;\n}\n\nfunction MLButton$isDisabled() {\n    return !!this.el.disabled;\n}\n\n",
    "'use strict';\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components;\n\n\nvar COMBO_CHANGE_MESSAGE = 'mlcombochange';\n\nvar DATALIST_TEMPLATE = '{{~ it.comboOptions :option }} \\\n                            <option value=\"{{= option.label }}\"></option> \\\n                         {{~}}';\n\nvar MLCombo = Component.createComponentClass('MLCombo', {\n    events: undefined,\n    data: {\n        get: MLCombo_get,\n        set: MLCombo_set,\n        del: MLCombo_del,\n        splice: undefined,\n        event: COMBO_CHANGE_MESSAGE\n    },\n    model: {\n        messages: {\n            '***': { subscriber: onOptionsChange, context: 'owner' }\n        }\n    },\n    dom: {\n        cls: 'ml-ui-datalist'\n    },\n    container: undefined\n});\n\ncomponentsRegistry.add(MLCombo);\n\nmodule.exports = MLCombo;\n\n\n_.extendProto(MLCombo, {\n    init: MLCombo$init\n});\n\n\nfunction MLCombo$init() {\n    Component.prototype.init.apply(this, arguments);\n    this.on('childrenbound', onChildrenBound);\n}\n\nfunction onChildrenBound() {\n    _.defineProperties(this, {\n        '_comboInput': this.container.scope.input,\n        '_comboList': this.container.scope.datalist\n    });\n\n    this._comboList.template.set(DATALIST_TEMPLATE);\n\n    this._comboInput.data.on('input',\n        { subscriber: dispatchChangeMessage, context: this });\n}\n\nfunction MLCombo_get() {\n    if (! this._comboInput) return;\n    return this._comboInput.data.get();\n}\n\nfunction MLCombo_set(value) {\n    return changeComboData.call(this, 'set', value);\n}\n\nfunction MLCombo_del() {\n    return changeComboData.call(this, 'del', value);\n}\n\nfunction changeComboData(method, value) {\n    if (! this._comboInput) return;\n    var result = this._comboInput.data[method](value);\n    dispatchChangeMessage.call(this);\n    return result;\n}\n\n\n// Post the data change\nfunction dispatchChangeMessage() {\n    this.data.dispatchSourceMessage(COMBO_CHANGE_MESSAGE);\n}\n\nfunction onOptionsChange(msg, data) {\n    this._comboList.template.render({\n        comboOptions: this.model.get()\n    });\n}\n",
    "'use strict';\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components\n    , check = milo.util.check\n    , Match = check.Match;\n\nvar COMBO_LIST_CHANGE_MESSAGE = 'mlcombolistchange';\n\n\nvar MLComboList = Component.createComponentClass('MLComboList', {\n    dom: {\n        cls: 'ml-ui-combo-list'\n    },\n    data: {\n        get: MLComboList_get,\n        set: MLComboList_set,\n        del: MLComboList_del,\n        event: COMBO_LIST_CHANGE_MESSAGE\n    },\n    events: undefined,\n    container: undefined,\n    model: {\n        messages: {\n            '***': { subscriber: onItemsChange, context: 'owner'}\n        }\n    },\n    template: {\n        template: '<div ml-bind=\"MLSuperCombo:combo\"></div>\\\n                   <div ml-bind=\"MLList:list\">\\\n                       <div ml-bind=\"MLListItem:item\" class=\"list-item\">\\\n                           <span ml-bind=\"[data]:label\"></span>\\\n                           <span ml-bind=\"[events]:deleteBtn\" class=\"glyphicon glyphicon-remove\"></span>\\\n                       </div>\\\n                   </div>'\n    }\n});\n\n\ncomponentsRegistry.add(MLComboList);\n\nmodule.exports = MLComboList;\n\n\n_.extendProto(MLComboList, {\n    init: MLComboList$init,\n    setOptions: MLComboList$setOptions,\n    setDataValidation: MLComboList$setDataValidation,\n    toggleAddButton: MLComboList$toggleAddButton,\n    destroy: MLComboList$destroy,\n    setAddItemPrompt: MLComboList$setAddItemPrompt,\n    clearComboInput : MLComboList$clearComboInput\n});\n\n\nfunction MLComboList$init() {\n    Component.prototype.init.apply(this, arguments);\n    this.model.set([]);\n    this.once('childrenbound', onChildrenBound);\n}\n\n\nfunction MLComboList$setDataValidation(dataValidation) {\n    check(dataValidation, Match.Optional(Function));\n    this._dataValidation = dataValidation;\n}\n\nfunction MLComboList$setOptions(arr) {\n    this._combo.setOptions(arr);\n}\n\n\nfunction MLComboList$clearComboInput () {\n    this._combo.clearComboInput();\n}\n\n/**\n * Component instance method\n * Hides add button\n * @param {Boolean} show\n */\nfunction MLComboList$toggleAddButton(show) {\n    this._combo.toggleAddButton(show);\n}\n\n\nfunction MLComboList$setAddItemPrompt(prompt) {\n   this._combo.setAddItemPrompt(prompt);\n}\n\n\nfunction MLComboList$destroy() {\n    Component.prototype.destroy.apply(this, arguments);\n    this._connector && milo.minder.destroyConnector(this._connector);\n    this._connector = null;\n}\n\n\nfunction onChildrenBound() {\n    this.template.render().binder();\n    componentSetup.call(this);\n}\n\nfunction componentSetup() {\n    _.defineProperties(this, {\n        '_combo': this.container.scope.combo,\n        '_list': this.container.scope.list\n    });\n\n    this._connector = milo.minder(this._list.model, '<<<->>>', this.model);\n    this._combo.data.on('', { subscriber: onComboChange, context: this });\n    this._combo.on('additem', { subscriber: onAddItem, context: this });\n}\n\nfunction onComboChange(msg, data) {\n    if (data.newValue && runDataValidation.call(this, msg, data))\n        this._list.model.push(data.newValue);\n    this._combo.data.del();\n    // because of supercombo listeners off you have to set _value explicitly\n    this._combo.data._value = '';\n}\n\nfunction runDataValidation(msg, data) {\n    return this._dataValidation \n        ? this._dataValidation(msg, data, this._list.model.get())\n        : true;\n}\n\nfunction onItemsChange(msg, data) {\n    this.data.dispatchSourceMessage(COMBO_LIST_CHANGE_MESSAGE);\n}\n\nfunction MLComboList_get() {\n    var value = this.model.get();\n    return typeof value == 'object' ? _.clone(value) : value;\n}\n\nfunction MLComboList_set(value) {\n    this.model.set(value);\n}\n\nfunction MLComboList_del() {\n    return this.model.set([]);\n}\n\n\nfunction onAddItem(msg, data) {\n    this.postMessage('additem', data);\n    this.events.postMessage('milo_combolistadditem', data);\n}\n",
    "'use strict';\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components;\n\nvar MLDate = Component.createComponentClass('MLDate', {\n    events: undefined,\n    data: {\n        get: MLDate_get,\n        set: MLDate_set,\n        del: MLDate_del,\n    },\n    dom: {\n        cls: 'ml-ui-date'\n    }\n});\n\n_.extendProto(MLDate, {\n    getMin: MLDate$getMin,\n    setMin: MLDate$setMin,\n    getMax: MLDate$getMax,\n    setMax: MLDate$setMax\n});\n\ncomponentsRegistry.add(MLDate);\n\nmodule.exports = MLDate;\n\n\nfunction MLDate$getMin() {\n    return _.date(this.el.min);\n}\n\n\nfunction MLDate$setMin(value) {\n    var date = _.toDate(value);\n\n    this.el.min = date ? toISO8601Format(date) : '';\n}\n\n\nfunction MLDate$getMax() {\n    return _.date(this.el.max);\n}\n\n\nfunction MLDate$setMax(value) {\n    var date = _.toDate(value);\n\n    this.el.max = date ? toISO8601Format(date) : '';\n}\n\n\nfunction MLDate_get() {\n    return _.toDate(this.el.value);\n}\n\n\nfunction MLDate_set(value) {\n    var date = _.toDate(value);\n\n    this.el.value = date ? toISO8601Format(date) : '';\n\n    dispatchInputMessage.call(this);\n}\n\nfunction MLDate_del() {\n    this.el.value = '';\n\n    dispatchInputMessage.call(this);\n}\n\n\nfunction dispatchInputMessage() {\n    this.data.dispatchSourceMessage('input'); // Dispatch the 'input' (usually dispatched by the underlying <input> element) event so that the data change can be listened to\n}\n\n\nfunction toISO8601Format(date) {\n    var dateArr = [\n        date.getFullYear(),\n        pad(date.getMonth() + 1),\n        pad(date.getDate())\n    ];\n\n    var dateStr = dateArr.join('-');\n\n    return dateStr;\n\n    function pad(n) { return n < 10 ? '0' + n : n; }\n}",
    "'use strict';\n\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components;\n\n\nvar MLDropTarget = Component.createComponentClass('MLDropTarget', ['drop']);\n\n\ncomponentsRegistry.add(MLDropTarget);\n\nmodule.exports = MLDropTarget;\n",
    "'use strict';\n\nvar doT = milo.util.doT\n    , componentsRegistry = milo.registry.components\n    , Component = milo.Component\n    , uniqueId = milo.util.uniqueId;\n\nvar TREE_TEMPLATE = '<ul class=\"ml-ui-foldtree-list\">\\\n                        {{~ it.data.items :item:index }}\\\n                            {{ var hasSubTree = item.items && item.items.length; }}\\\n                            <li {{? hasSubTree }}class=\"ml-ui-foldtree--has-multiple\"{{?}}>\\\n                                <div class=\"ml-ui-foldtree-item\" data-item-id=\"{{= it.itemIDs[index] }}\">\\\n                                    {{? hasSubTree }}\\\n                                        <div class=\"ml-ui-foldtree-button\"></div>\\\n                                    {{?}}\\\n                                    {{= it.itemTemplate({ item: item }) }}\\\n                                </div>\\\n                                {{? hasSubTree }}\\\n                                    {{= it.treeTemplate(item) }}\\\n                                {{?}}\\\n                            </li>\\\n                        {{~}}\\\n                    </ul>';\n\nvar DEFAULT_COMPILED_ITEM_TEMPLATE = doT.compile('\\\n            <span class=\"ml-ui-foldtree-label\">\\\n                {{= it.item.label }}\\\n            </span>')\n    , COMPILED_TREE_TEMPLATE = doT.compile(TREE_TEMPLATE);\n\n\nvar MLFoldTree = Component.createComponentClass('MLFoldTree', {\n    container: undefined,\n    events: {\n        messages: {\n            'click dblclick': { subscriber: onItemEvent, context: 'owner' }\n        }\n    },\n    dom: {\n        cls: 'ml-ui-foldtree-main'\n    }\n});\n\ncomponentsRegistry.add(MLFoldTree);\n\nmodule.exports = MLFoldTree;\n\n_.extendProto(MLFoldTree, {\n    setItemTemplate: MLFoldTree$setItemTemplate,\n    renderTree: MLFoldTree$renderTree,\n    setActiveItem: MLFoldTree$setActiveItem,\n    toggleItem: MLFoldTree$toggleItem\n});\n\nfunction foldUnfold(el, opened) {\n    if (opened)\n        el.classList.add('ml-ui-foldtree--unfold', opened);\n    else\n        el.classList.toggle('ml-ui-foldtree--unfold');\n}\n\nfunction itemMessage(msg, el) {\n    var id = el.getAttribute('data-item-id')\n        , item = this._itemsMap[id];\n\n    this.postMessage('mlfoldtree_' + msg, {\n        item: item,\n        el: el\n    });\n}\n\nfunction onItemEvent(msg, e) {\n    var el = e.target;\n    if (el.classList.contains('ml-ui-foldtree-button'))\n        foldUnfold(el.parentNode.parentNode);\n    else if (el.classList.contains('ml-ui-foldtree-label'))\n        itemMessage.call(this, msg, el.parentNode);\n    else return;\n    e.stopPropagation();\n}\n\nfunction MLFoldTree$setItemTemplate (templateStr) {\n    this._itemTemplate = doT.compile(templateStr);\n}\n\nfunction MLFoldTree$renderTree (data) {\n    var self = this;\n    this._data = data;\n    self._itemsMap = {};\n    this.el.innerHTML = _renderTree(data);\n\n    function _renderTree (data) {\n        if (data.items)\n            var itemsIDs = _.map(data.items, function(item) {\n                var id = item.id || uniqueId();\n                if (self._itemsMap[id]) throw new Error('MLFoldTree: item has duplicate ID:' + id);\n                self._itemsMap[id] = item;\n                return id;\n            });\n\n        return COMPILED_TREE_TEMPLATE({\n            itemIDs: itemsIDs,\n            data: data,\n            itemTemplate: self._itemTemplate || DEFAULT_COMPILED_ITEM_TEMPLATE,\n            treeTemplate: _renderTree\n        });\n    }\n}\n\n\nfunction MLFoldTree$setActiveItem(id, cssClass) {\n    cssClass = cssClass || 'ml-ui-foldtree-active';\n    var items = this.el.querySelectorAll('div.ml-ui-foldtree-item');\n    _.forEach(items, function(item) {\n        item.classList.remove(cssClass);\n    });\n    if (id) {\n        var item = this.el.querySelector('div.ml-ui-foldtree-item[data-item-id=\"' + id + '\"]');\n        item.classList.add(cssClass);\n    }\n}\n\nfunction MLFoldTree$toggleItem(id, opened) {\n    var item = this.el.querySelector('div.ml-ui-foldtree-item[data-item-id=\"' + id + '\"]');\n    foldUnfold(item.parentNode, opened);\n}\n\n\n",
    "'use strict';\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components;\n\n\nvar MLGroup = Component.createComponentClass('MLGroup', {\n    container: undefined,\n    data: undefined,\n    events: undefined,\n    dom: {\n        cls: 'ml-ui-group'\n    }\n});\n\ncomponentsRegistry.add(MLGroup);\n\nmodule.exports = MLGroup;\n",
    "'use strict';\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components;\n\n\nvar MLHyperlink = Component.createComponentClass('MLHyperlink', {\n    events: undefined,\n    data: undefined,\n    dom: {\n        cls: 'ml-ui-hyperlink'\n    }\n});\n\ncomponentsRegistry.add(MLHyperlink);\n\nmodule.exports = MLHyperlink;\n",
    "'use strict';\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components;\n\n\nvar IMAGE_CHANGE_MESSAGE = 'mlimagechange';\n\nvar MLImage = Component.createComponentClass('MLImage', {\n    data: {\n        set: MLImage_set,\n        get: MLImage_get,\n        del: MLImage_del,\n        splice: undefined,\n        event: IMAGE_CHANGE_MESSAGE\n    },\n    model: {\n        messages: {\n            '.src': { subscriber: onModelChange, context: 'owner' }\n        }\n    },\n    events: undefined,\n    container: undefined,\n    dom: {\n        tagName: 'img',\n        cls: 'ml-ui-image'\n    }\n});\n\ncomponentsRegistry.add(MLImage);\n\nmodule.exports = MLImage;\n\n\n_.extendProto(MLImage, {\n    init: MLImage$init\n});\n\n\n/**\n * Component instance method\n * Initialize radio group and setup\n */\nfunction MLImage$init() {\n    Component.prototype.init.apply(this, arguments);\n}\n\n\n/**\n * Sets image value\n * Replaces the data set operation to deal with radio buttons\n *\n * @param {Mixed} value The value to be set\n */\nfunction MLImage_set(value) {\n    this.model.set(value);\n    return value;\n}\n\n\n/**\n * Gets group value\n * Retrieves the selected value of the group\n *\n * @return {String}\n */\nfunction MLImage_get() {\n    var value = this.model.get();\n    return value && typeof value == 'object' ? _.clone(value) : value;\n}\n\n\n/**\n * Deleted group value\n * Deletes the value of the group, setting it to empty\n */\nfunction MLImage_del() {\n    this.model.del();\n}\n\n\n// Post the data change\nfunction dispatchChangeMessage() {\n    this.data.dispatchSourceMessage(IMAGE_CHANGE_MESSAGE);\n}\n\n\nfunction onModelChange(path, data) {\n    this.el.src = data.newValue;\n    dispatchChangeMessage.call(this);\n}\n",
    "'use strict';\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components;\n\n\nvar MLInput = Component.createComponentClass('MLInput', {\n    data: undefined,\n    events: undefined,\n    dom: {\n        cls: 'ml-ui-input'\n    }\n});\n\ncomponentsRegistry.add(MLInput);\n\nmodule.exports = MLInput;\n\n_.extendProto(MLInput, {\n    disable: MLInput$disable,\n    isDisabled: MLInput$isDisabled,\n    setMaxLength: MLInput$setMaxLength\n});\n\nfunction MLInput$disable(disable) {\n    this.el.disabled = disable;\n}\n\nfunction MLInput$isDisabled() {\n    return !!this.el.disabled;\n}\n\nfunction MLInput$setMaxLength(length) {\n    this.el.setAttribute('maxlength', length);\n}\n",
    "'use strict';\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components;\n\nvar INPUT_LIST_CHANGE_MESSAGE = 'mlinputlistchange';\n\nvar asyncHandler = function (value, callback) {callback(value);};\n\nvar MLInputList = Component.createComponentClass('MLInputList', {\n    dom: {\n        cls: 'ml-ui-input-list'\n    },\n    data: {\n        get: MLInputList_get,\n        set: MLInputList_set,\n        del: MLInputList_del,\n        splice: MLInputList_splice,\n        event: INPUT_LIST_CHANGE_MESSAGE\n    },\n    events: undefined,\n    container: undefined,\n    model: {\n        messages: {\n            '***': { subscriber: onItemsChange, context: 'owner' }\n        }\n    },\n    template: {\n        template: '\\\n            <div ml-bind=\"MLList:list\">\\\n                <div ml-bind=\"MLListItem:item\" class=\"list-item\">\\\n                    <span ml-bind=\"[data]:label\"></span>\\\n                    <span ml-bind=\"[events]:deleteBtn\" class=\"glyphicon glyphicon-remove\"></span>\\\n                </div>\\\n            </div>\\\n            <input type=\"text\" ml-bind=\"MLInput:input\" class=\"form-control\">\\\n            <button ml-bind=\"MLButton:button\" class=\"btn btn-default\">\\\n                Add\\\n            </button>'\n    }\n});\n\ncomponentsRegistry.add(MLInputList);\n\nmodule.exports = MLInputList;\n\n_.extendProto(MLInputList, {\n    init: MLInputList$init,\n    setAsync: MLInputList$setAsync,\n    setPlaceHolder: MLInputList$setPlaceHolder,\n    destroy: MLInputList$destroy\n});\n\nfunction MLInputList$init() {\n    Component.prototype.init.apply(this, arguments);\n    this.once('childrenbound', onChildrenBound);\n    this.model.set([]);\n}\n\nfunction onChildrenBound() {\n    render.call(this);\n}\n\nfunction MLInputList$setPlaceHolder(placeHolder) {\n    this._input.el.setAttribute('placeHolder', placeHolder);\n}\n\nfunction MLInputList$setAsync(newHandler) {\n    asyncHandler = newHandler || asyncHandler;\n}\n\nfunction MLInputList$destroy() {\n    Component.prototype.destroy.apply(this, arguments);\n    this._connector && milo.minder.destroyConnector(this._connector);\n    this._connector = null;\n}\n\nfunction render() {\n    this.template.render().binder();\n    componentSetup.call(this);\n}\n\nfunction componentSetup() {\n    _.defineProperties(this, {\n        '_input': this.container.scope.input,\n        '_button': this.container.scope.button,\n        '_list': this.container.scope.list\n    });\n    this._connector = milo.minder(this._list.model, '<<<->>>', this.model);\n    this._button.events.on('click', {subscriber: onClick, context: this });   \n}\n\nfunction onClick(msg) {\n    var value = this._input.data.get(0);\n    if (this._input.data)\n        asyncHandler(value, function (label, value) {\n            this._list.model.push({ label: label, value: value });\n        }.bind(this));\n    this._input.data.del();\n}\n\nfunction onItemsChange(msg, data) {\n    this.data.dispatchSourceMessage(INPUT_LIST_CHANGE_MESSAGE);\n}\n\nfunction MLInputList_get() {\n    var model = this.model.get();\n    return model ? _.clone(model) : undefined;\n}\n\nfunction MLInputList_set(value) {\n    this.model.set(value);\n}\n\nfunction MLInputList_del() {\n    return this.model.set([]);\n}\n\nfunction MLInputList_splice() { // ... arguments\n    this.model.splice.apply(this.model, arguments);\n}",
    "'use strict';\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components;\n\nvar LIST_CHANGE_MESSAGE = 'mllistchange'\n    , DELETE_BUTTON_NAME = 'deleteBtn';\n\n\nvar MLList = Component.createComponentClass('MLList', {\n    dom: {\n        cls: 'ml-ui-list'\n    },\n    data: undefined,\n    events: undefined,\n    model: undefined,\n    list: undefined\n});\n\n\ncomponentsRegistry.add(MLList);\n\nmodule.exports = MLList;\n\n\n_.extendProto(MLList, {\n    init: MLList$init,\n    destroy: MLList$destroy,\n    removeItem: MLList$removeItem,\n    moveItem: MLList$moveItem\n});\n\n\nfunction MLList$init() {\n    Component.prototype.init.apply(this, arguments);\n    this.on('childrenbound', onChildrenBound);\n}\n\n\nfunction MLList$destroy() {\n    this._connector && milo.minder.destroyConnector(this._connector);\n    this._connector = null;\n    Component.prototype.destroy.apply(this, arguments);\n}\n\n\nfunction MLList$removeItem(index){\n    this.model.splice(index, 1);\n}\n\n\nfunction MLList$moveItem(from, to) {\n    var splicedData = this.model.splice(from, 1);\n    return this.model.splice(to, 0, splicedData[0]);\n}\n\n\nfunction onChildrenBound() {\n    this.model.set([]);\n    this._connector = milo.minder(this.model, '<<<-', this.data).deferChangeMode('<<<->>>');\n}\n",
    "'use strict';\n\nvar Component = milo.Component\n    , DragDrop = milo.util.dragDrop\n    , componentsRegistry = milo.registry.components;\n\n\nvar LISTITEM_CHANGE_MESSAGE = 'mllistitemchange';\n\nvar MLListItem = Component.createComponentClass('MLListItem', {\n    container: undefined,\n    dom: undefined,\n    drag: {\n        messages: {\n            'dragstart': { subscriber: onDragStart, context: 'owner' }\n        },\n        meta: {\n            params: 'getMetaData'\n        }\n    },\n    drop: {\n        messages: {\n            'dragenter': { subscriber: onDragHover, context: 'owner' },\n            'dragover': { subscriber: onDragHover, context: 'owner' },\n            'dragleave': { subscriber: onDragOut, context: 'owner' },\n            'drop': { subscriber: onItemDrop, context: 'owner' }\n        },\n        allow: {\n            components: isComponentAllowed\n        }\n    },\n    data: {\n        get: MLListItem_get,\n        set: MLListItem_set,\n        del: MLListItem_del,\n        event: LISTITEM_CHANGE_MESSAGE\n    },\n    model: undefined,\n    item: undefined\n});\n\ncomponentsRegistry.add(MLListItem);\n\nvar MLListItem = module.exports = MLListItem;\n\n\n_.extendProto(MLListItem, {\n    init: MLListItem$init,\n    moveItem: MLListItem$moveItem,\n    removeItem: MLListItem$removeItem,\n    getMetaData: MLListItem$getMetaData,\n    isDropAllowed: MLListItem$isDropAllowed\n});\n\n\nfunction MLListItem$init() {\n    Component.prototype.init.apply(this, arguments);\n    this.on('childrenbound', onChildrenBound);\n}\n\n\nfunction onChildrenBound() {\n    var deleteBtn = this.container.scope.deleteBtn;\n    deleteBtn && deleteBtn.events.on('click', { subscriber: this.removeItem, context: this });\n}\n\n\nfunction MLListItem$removeItem() {\n    try { var listOwner = this.item.list.owner; } catch(e) {}\n    listOwner && listOwner.removeItem(this.item.index);\n}\n\n\nfunction MLListItem$moveItem(index) {\n    var listOwner = this.item.list.owner;\n    listOwner && listOwner.moveItem(this.item.index, index);\n}\n\n\nfunction MLListItem$isDropAllowed(meta/*, dragDrop*/){\n    return meta.params && meta.params.index\n            && meta.compClass == 'MLListItem'\n            && draggingFromSameList.call(this);\n}\n\n\nfunction draggingFromSameList(comp) {\n    comp = comp || DragDrop.service.getCurrentDragSource();\n    try { var sourceList = comp.item.list; } catch(e) {}\n    return sourceList == this.item.list;\n}\n\n\nfunction isComponentAllowed() {\n    return this.isDropAllowed.apply(this, arguments);\n}\n\n\nfunction onItemDrop(eventType, event) {\n    onDragOut.call(this);\n    var dt = new DragDrop(event);\n    var meta = dt.getComponentMeta();\n    var state = dt.getComponentState();\n    var listOwner = this.item.list.owner;\n    var index = meta.params && meta.params.index;\n    var dropPosition = DragDrop.getDropPositionY(event, this.el);\n    var isBelow = dropPosition == 'below';\n    var isAbove = dropPosition == 'above';\n    var targetIndex;\n\n    if (draggingFromSameList.call(this)){\n        if(state.compName == this.name) return;\n        var stateIndex = state.facetsStates.item.state.index;\n        var isMoveDown = stateIndex < this.item.index;\n        var isSamePosition;\n        if(isMoveDown) {\n            isSamePosition = isAbove && stateIndex + 1 == this.item.index;\n            if(isSamePosition) return;\n            targetIndex = this.item.index - isAbove;\n        }\n        else {//move up\n            isSamePosition = isBelow && stateIndex - 1 == this.item.index;\n            if(isSamePosition) return;\n            targetIndex = this.item.index + isBelow;\n        }\n        listOwner.moveItem(+index, targetIndex, state);\n    }\n    else {\n        targetIndex = this.item.index + isBelow;\n        try { var data = state.facetsStates.data.state; } catch(e) {}\n        listOwner.data.splice(targetIndex, 0, data);\n    }\n}\n\n\nfunction onDragStart(/*eventType, event*/) {\n    DragDrop.service.once('dragdropcompleted', { subscriber: onDragDropCompleted, context: this });\n}\n\n\nfunction onDragHover(/*eventType, event*/) {\n    this.dom.addCssClasses('ml-drag-over');\n}\n\n\nfunction onDragOut(/*eventType, event*/) {\n    this.dom.removeCssClasses('ml-drag-over');\n}\n\n\nfunction onDragDropCompleted(msg, data) {\n    var dropTarget = data.component;\n    var droppedInAnotherList = data.eventType == 'drop' && !draggingFromSameList.call(this, dropTarget);\n    if (droppedInAnotherList) this.item.removeItem();\n}\n\n\nfunction MLListItem$getMetaData() {\n    return {\n        index: this.item.index\n    };\n}\n\n\nfunction MLListItem_get() {\n    var value = this.model.get();\n    return value !== null && typeof value == 'object' ? _.clone(value) : value;\n}\n\n\nfunction MLListItem_set(value) {\n    if (typeof value == 'object')\n        this.data._set(value);\n    this.model.set(value);\n    _sendChangeMessage.call(this);\n    return value;\n}\n\n\nfunction MLListItem_del() {\n    this.data._del();\n    this.model.del();\n    _sendChangeMessage.call(this);\n}\n\n\nfunction _sendChangeMessage() {\n    this.data.dispatchSourceMessage(LISTITEM_CHANGE_MESSAGE);\n}\n",
    "'use strict';\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components\n    , uniqueId = milo.util.uniqueId;\n\n\nvar RADIO_CHANGE_MESSAGE = 'mlradiogroupchange'\n    , ELEMENT_NAME_PROPERTY = '_mlRadioGroupElementID'\n    , ELEMENT_NAME_PREFIX = 'ml-radio-group-';\n\nvar MLRadioGroup = Component.createComponentClass('MLRadioGroup', {\n    data: {\n        set: MLRadioGroup_set,\n        get: MLRadioGroup_get,\n        del: MLRadioGroup_del,\n        splice: undefined,\n        event: RADIO_CHANGE_MESSAGE\n    },\n    model: {\n        messages: {\n            '***': { subscriber: onOptionsChange, context: 'owner' }\n        }\n    },\n    events: {\n        messages: {\n            'click': { subscriber: onGroupClick, context: 'owner' }\n        }\n    },\n    container: undefined,\n    dom: {\n        cls: 'ml-ui-radio-group'\n    },\n    template: {\n        template: '{{~ it.radioOptions :option }} \\\n                        {{##def.elID:{{= it.elementName }}-{{= option.value }}#}} \\\n                        <span class=\"{{= it._renderOptions.optionCssClass || \"' + ELEMENT_NAME_PREFIX + 'option\" }}\"> \\\n                            <input id=\"{{# def.elID }}\" type=\"radio\" value=\"{{= option.value }}\" name=\"{{= it.elementName }}\"> \\\n                            <label for=\"{{# def.elID }}\">{{= option.label }}</label> \\\n                        </span> \\\n                   {{~}}'\n    }\n});\n\ncomponentsRegistry.add(MLRadioGroup);\n\nmodule.exports = MLRadioGroup;\n\n\n_.extendProto(MLRadioGroup, {\n    init: MLRadioGroup$init,\n    destroy: MLRadioGroup$destroy,\n    setRenderOptions: MLRadioGroup$setRenderOptions\n});\n\n\n/**\n * Component instance method\n * Initialize radio group and setup\n */\nfunction MLRadioGroup$init() {\n    _.defineProperty(this, '_radioList', [], _.CONF);\n    _.defineProperty(this, ELEMENT_NAME_PROPERTY, ELEMENT_NAME_PREFIX + uniqueId());\n    this._renderOptions = {};\n    Component.prototype.init.apply(this, arguments);\n}\n\n\nfunction MLRadioGroup$setRenderOptions(options) {\n    this._renderOptions = options;\n}\n\n\n/**\n * Sets group value\n * Replaces the data set operation to deal with radio buttons\n *\n * @param {Mixed} value The value to be set\n */\nfunction MLRadioGroup_set(value) {\n    var options = this._radioList\n        , setResult;\n    if (options.length) {\n        options.forEach(function(radio) {\n            radio.checked = radio.value == value;\n            if (radio.checked)\n                setResult = value;\n        });\n\n        dispatchChangeMessage.call(this);\n\n        return setResult;\n    }\n}\n\n\n/**\n * Gets group value\n * Retrieves the selected value of the group\n *\n * @return {String}\n */\nfunction MLRadioGroup_get() {\n    var checked = _.find(this._radioList, function(radio) {\n        return radio.checked;\n    });\n\n    return checked && checked.value || undefined;\n}\n\n\n/**\n * Deleted group value\n * Deletes the value of the group, setting it to empty\n */\nfunction MLRadioGroup_del() {\n    var options = this._radioList;\n    if (options.length)\n        options.forEach(function(radio) {\n            radio.checked = false;\n        });\n\n    dispatchChangeMessage.call(this);\n    return undefined;\n}\n\n\n/**\n * Manage radio children clicks\n */\nfunction onGroupClick(eventType, event) {\n    if (event.target.type == 'radio')\n        dispatchChangeMessage.call(this);\n}\n\n// Post the data change\nfunction dispatchChangeMessage() {\n    this.data.dispatchSourceMessage(RADIO_CHANGE_MESSAGE);\n}\n\n\n// Set radio button children on model change\nfunction onOptionsChange(path, data) {\n    this.template.render({\n        radioOptions: this.model.get(),\n        elementName: this[ELEMENT_NAME_PROPERTY],\n        _renderOptions: this._renderOptions\n    });\n\n    var radioEls = this.el.querySelectorAll('input[type=\"radio\"]')\n        , options = _.toArray(radioEls);\n\n    this._radioList.length = 0;\n    this._radioList.splice.apply(this._radioList, [0, 0].concat(options));\n}\n\n\nfunction MLRadioGroup$destroy() {\n    delete this._radioList;\n    Component.prototype.destroy.apply(this, arguments);\n}\n",
    "'use strict';\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components;\n\n\nvar MLSelect = Component.createComponentClass('MLSelect', {\n    dom: {\n        cls: 'ml-ui-select'\n    },\n    data: undefined,\n    events: undefined,\n    model: {\n        messages: {\n            '**': { subscriber: onOptionsChange, context: 'owner' }\n        }\n    },\n    template: {\n        template: '{{~ it.selectOptions :option }} \\\n                        <option value=\"{{= option.value }}\" {{? option.selected }}selected{{?}}>{{= option.label }}</option> \\\n                   {{~}}'\n    }\n});\n\n\ncomponentsRegistry.add(MLSelect);\n\nmodule.exports = MLSelect;\n\n\n_.extendProto(MLSelect, {\n    setOptions: MLSelect$setOptions,\n    disable: MLSelect$disable\n});\n\n\nfunction MLSelect$setOptions(options) {\n    // Set options temporarily disables model subscriptions (As a workaround for performance issues relating to model updates / template re-rendering)\n    var modelChangeListener = { context: this, subscriber: onOptionsChange };\n\n    this.model.off('**', modelChangeListener);\n    this.model.set(options);\n    this.model.on('**', modelChangeListener);\n\n    onOptionsChange.call(this);\n}\n\n\nfunction MLSelect$disable(disable) {\n    this.el.disabled = disable;\n}\n\n\nfunction onOptionsChange(path, data) {\n    this.template.render({ selectOptions: this.model.get() });\n}\n",
    "'use strict';\n\n/**\n * MLSuperCombo\n * A combo select list with intelligent scrolling of super large lists.\n */\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components\n    , doT = milo.util.doT\n    , logger = milo.util.logger;\n\nvar COMBO_OPEN = 'ml-ui-supercombo-open';\nvar COMBO_CHANGE_MESSAGE = 'mlsupercombochange';\n\nvar OPTIONS_TEMPLATE = '{{~ it.comboOptions :option:index }}\\\n                            <div {{? option.selected}}class=\"selected\" {{?}}data-value=\"{{= index }}\">{{= option.label }}</div>\\\n                        {{~}}';\n\nvar MAX_RENDERED = 100;\nvar BUFFER = 25;\nvar DEFAULT_ELEMENT_HEIGHT = 20;\n\nvar MLSuperCombo = Component.createComponentClass('MLSuperCombo', {\n    events: {\n        messages: {\n            'mouseleave': {subscriber: onMouseLeave, context: 'owner'},\n            'mouseover': {subscriber: onMouseOver, context: 'owner'}\n        }\n    },\n    data: {\n        get: MLSuperCombo_get,\n        set: MLSuperCombo_set,\n        del: MLSuperCombo_del,\n        splice: undefined,\n        event: COMBO_CHANGE_MESSAGE\n    },\n    dom: {\n        cls: 'ml-ui-supercombo'\n    },\n    template: {\n        template: '<input ml-bind=\"[data, events]:input\" class=\"form-control ml-ui-input\">\\\n                   <div ml-bind=\"[dom]:addItemDiv\" class=\"ml-ui-supercombo-add\">\\\n                        <span ml-bind=\":addPrompt\"></span>\\\n                        <button ml-bind=\"[events, dom]:addBtn\" class=\"btn btn-default ml-ui-button\">Add</button>\\\n                   </div>\\\n                   <div ml-bind=\"[dom, events]:list\" class=\"ml-ui-supercombo-dropdown\">\\\n                       <div ml-bind=\"[dom]:before\"></div>\\\n                       <div ml-bind=\"[template, dom, events]:options\" class=\"ml-ui-supercombo-options\"></div>\\\n                       <div ml-bind=\"[dom]:after\"></div>\\\n                   </div>'\n    },\n    container: undefined\n});\n\ncomponentsRegistry.add(MLSuperCombo);\n\nmodule.exports = MLSuperCombo;\n\n/**\n * Public Api\n */\n_.extendProto(MLSuperCombo, {\n    init: MLSuperCombo$init,\n    showOptions: MLSuperCombo$showOptions,\n    hideOptions: MLSuperCombo$hideOptions,\n    toggleOptions: MLSuperCombo$toggleOptions,\n    setOptions: MLSuperCombo$setOptions,\n    initOptionsURL: MLSuperCombo$initOptionsURL,\n    setFilteredOptions: MLSuperCombo$setFilteredOptions,\n    update: MLSuperCombo$update,\n    toggleAddButton: MLSuperCombo$toggleAddButton,\n    setAddItemPrompt: MLSuperCombo$setAddItemPrompt,\n    setPlaceholder: MLSuperCombo$setPlaceholder,\n    clearComboInput: MLSuperCombo_del\n});\n\n\n/**\n * Component instance method\n * Initialise the component, wait for childrenbound, setup empty options arrays.\n */\nfunction MLSuperCombo$init() {\n    Component.prototype.init.apply(this, arguments);\n\n    this.once('childrenbound', onChildrenBound);\n\n    _.defineProperties(this, {\n        _optionsData: [],\n        _filteredOptionsData: []\n    }, _.WRIT);\n}\n\n/**\n * Handler for init childrenbound listener. Renders template.\n */\nfunction onChildrenBound() {\n    this.template.render().binder();\n    componentSetup.call(this);\n}\n\n\n/**\n * Define instance properties, get subcomponents, call setup sub-tasks\n */\nfunction componentSetup() {\n    var scope = this.container.scope;\n\n    _.defineProperties(this, {\n        _comboInput: scope.input,\n        _comboList: scope.list,\n        _comboOptions: scope.options,\n        _comboBefore: scope.before,\n        _comboAfter: scope.after,\n        _comboAddItemDiv: scope.addItemDiv,\n        _comboAddPrompt: scope.addPrompt,\n        _comboAddBtn: scope.addBtn,\n        _optionTemplate: doT.compile(OPTIONS_TEMPLATE)\n    });\n\n    _.defineProperties(this, {\n        _startIndex: 0,\n        _endIndex: MAX_RENDERED,\n        _hidden: false,\n        _elementHeight: DEFAULT_ELEMENT_HEIGHT,\n        _total: 0,\n        _optionsHeight: 200,\n        _lastScrollPos: 0,\n        _currentValue: null,\n        _selected: null,\n        _isAddButtonShown: false\n    }, _.WRIT);\n\n    // Component Setup\n    this.dom.setStyles({ position: 'relative' });\n    setupComboList(this._comboList, this._comboOptions, this);\n    setupComboInput(this._comboInput, this);\n    setupComboBtn(this._comboAddBtn, this);\n\n    this.events.on('keydown', { subscriber: changeSelected, context: this });\n    //this.events.on('mouseleave', { subscriber: MLSuperCombo$hideOptions, context: this });\n}\n\n/**\n * Component instance method\n * Shows or hides option list.\n *\n * @param {Boolean} show true to show, false to hide\n */\nfunction MLSuperCombo$toggleOptions(show) {\n    this._hidden = !show;\n    this._comboList.dom.toggle(show);\n}\n\n/**\n * Component instance method\n * Shows options list\n */\nfunction MLSuperCombo$showOptions() {\n    // Position the list to maximise the amount of visible content\n    var bounds = this.el.getBoundingClientRect();\n    var pageHeight = Math.max(this.el.ownerDocument.documentElement.clientHeight, window.innerHeight || 0);\n    var listTopStyle = ''; // Positions options underneath the combobox (Default behaviour)\n    var bottomOverlap = (bounds.bottom + this._optionsHeight) - pageHeight;\n\n    if(bottomOverlap > 0) {\n        var topOverlap = this._optionsHeight - bounds.top;\n\n        if(topOverlap < bottomOverlap) {\n            listTopStyle = - this._optionsHeight + 'px'; // Position options above the combobox\n        }\n    }\n\n    this._comboList.dom.setStyles({ top: listTopStyle });\n    this._hidden = false;\n    this.el.classList.add(COMBO_OPEN);\n    this._comboList.dom.toggle(true);\n}\n\n/**\n * Component instance method\n * Hides options list\n */\nfunction MLSuperCombo$hideOptions() {\n    this._hidden = true;\n    this.el.classList.remove(COMBO_OPEN);\n    this._comboList.dom.toggle(false);\n}\n\n/**\n * Component instance method\n * Hides add button\n */\nfunction MLSuperCombo$toggleAddButton(show, options) {\n    this._comboAddItemDiv.dom.toggle(show);\n    if (options && options.preserveState) this.__showAddOnClick = this._isAddButtonShown;\n    this._isAddButtonShown = show;\n}\n\n\nfunction MLSuperCombo$setAddItemPrompt(prompt) {\n    this._addItemPrompt = prompt;\n    this._comboAddPrompt.el.innerHTML = prompt;\n    this.toggleAddButton(false);\n}\n\nfunction MLSuperCombo$setPlaceholder(placeholder) {\n    this._comboInput.el.placeholder = placeholder;\n}\n\n/**\n * Component instance method\n * Sets the options of the dropdown\n *\n * @param {Array[Object]} arr the options to set with label and value pairs. Value can be an object.\n */\nfunction MLSuperCombo$setOptions(arr) {\n    this._optionsData = arr;\n    this.setFilteredOptions(arr);\n}\n\n\n/**\n * Component instance method\n * Initialise the remote options of the dropdown\n *\n * @param {Object} options the options to initialise.\n */\nfunction MLSuperCombo$initOptionsURL(options) {\n    this._optionsURL = options.url;\n    this._formatOptionsURL = options.formatOptions || function(e){return e;};\n}\n\n\n/**\n * Private method\n * Sets the options of the dropdown based on a request\n */\nfunction _getOptionsURL(cb) {\n    var url = this._optionsURL,\n        queryString = this._comboInput.data.get();\n    var self = this;\n    cb = cb || _.noop;\n    milo.util.request.post(url, { name: queryString }, function (err, response) {\n        if (err) {\n            logger.error('Can not search for \"' + queryString + '\"');\n            return cb(new Error('Request error'));\n        }\n\n        var responseData = _.jsonParse(response);\n        if (responseData) cb(null, responseData);\n        else cb(new Error('Data error'));\n    });\n}\n\n\n/**\n * Component instance method\n * Sets the filtered options, which is a subset of normal options\n *\n * @param {[type]} arr The options to set\n */\nfunction MLSuperCombo$setFilteredOptions(arr) {\n    if (! arr) return logger.error('setFilteredOptions: parameter is undefined');\n    this._filteredOptionsData = arr;\n    this._total = arr.length;\n    this.update();\n}\n\n/**\n * Component instance method\n * Updates the list. This is used on scroll, and makes use of the filteredOptions to\n * intelligently show a subset of the filtered list at a time.\n */\nfunction MLSuperCombo$update() {\n    var wasHidden = this._hidden;\n\n    var arrToShow = this._filteredOptionsData.slice(this._startIndex, this._endIndex);\n\n    this._comboOptions.template.render({\n        comboOptions: arrToShow\n    });\n\n    this._elementHeight = this._elementHeight || DEFAULT_ELEMENT_HEIGHT;\n\n    if (wasHidden)\n        this.hideOptions();\n\n    var beforeHeight = this._startIndex * this._elementHeight;\n    var afterHeight = (this._total - this._endIndex) * this._elementHeight;\n    this._comboBefore.el.style.height = beforeHeight + 'px';\n    this._comboAfter.el.style.height = afterHeight > 0 ? afterHeight + 'px' : '0px';\n}\n\n/**\n * Setup the combo list\n *\n * @param  {Component} list\n * @param  {Array} options\n * @param  {Component} self\n */\nfunction setupComboList(list, options, self) {\n    self.toggleAddButton(false);\n    options.template.set(OPTIONS_TEMPLATE);\n\n    list.dom.setStyles({\n        overflow: 'scroll',\n        height: self._optionsHeight + 'px',\n        width: '100%',\n        position: 'absolute',\n        zIndex: 10\n        // top: yPos + 'px',\n        // left: xPos + 'px',\n    });\n\n    self.hideOptions();\n    list.events.onMessages({\n        'click': {subscriber: onListClick, context: self},\n        'scroll': {subscriber: onListScroll, context: self}\n    });\n}\n\n/**\n * Setup the input component\n *\n * @param  {Component} input\n * @param  {Component} self\n */\nfunction setupComboInput(input, self) {\n    input.events.once('focus', function(){\n        input.data.on('', { subscriber: onDataChange, context: self });\n        input.events.on('click', {subscriber: onInputClick, context: self });\n        input.events.on('keydown', {subscriber: onEnterKey, context: self });\n    });\n}\n\n/**\n * Setup the button\n * @param  {Component} btn\n * @param  {Component} self\n */\nfunction setupComboBtn(btn, self) {\n    btn.events.on('click', { subscriber: onAddBtn, context: self });\n}\n\n\n/**\n * Custom data facet get method\n */\nfunction MLSuperCombo_get() {\n    return this._currentValue;\n}\n\n/**\n * Custom data facet set method\n * @param {Variable} obj\n */\nfunction MLSuperCombo_set(obj) {\n    this._currentValue = obj;\n    this._comboInput.data.set(obj && obj.label);\n    _.deferMethod(this, 'hideOptions');\n}\n\n/**\n * Custom data facet del method\n */\nfunction MLSuperCombo_del() {\n    this._currentValue = null;\n    this._comboInput.data.set('');\n}\n\n\n/**\n * Input data change handler\n * When the input data changes, this method filters the optionsData, and sets the first element\n * to be selected.\n * @param  {String} msg\n * @param  {Objext} data\n */\nfunction onDataChange(msg, data) {\n    var text = data.newValue && data.newValue.trim();\n    if (this._optionsURL) {\n        var self = this;\n        _getOptionsURL.call(this, function(err, responseData){\n            if (err || !responseData) return;\n            try {\n                var options = responseData.data.map(self._formatOptionsURL);\n                self.setOptions(options);\n                _updateOptionsAndAddButton.call(self, text, self._optionsData);\n            } catch(e) {\n                logger.error('Data error', e);\n            }\n        });\n    } else {\n        var filteredData = _filterData.call(this, text);\n        _updateOptionsAndAddButton.call(this, text, filteredData);\n    }\n}\n\n\nfunction _filterData(text) {\n    return this._optionsData.filter(function(option) {\n        delete option.selected;\n        if (option.label) {\n            var label = option.label.toLowerCase();\n            return label.trim().toLowerCase().indexOf(text.toLowerCase()) == 0;\n        }\n    });\n}\n\n\nfunction _updateOptionsAndAddButton(text, filteredArr) {\n    if (!text) {\n        this.toggleAddButton(false, { preserveState: true });\n    } else {\n        if (filteredArr.length && _.find(filteredArr, isExactMatch)) {\n            this.toggleAddButton(false, { preserveState: true });\n        } else if (this._addItemPrompt) {\n            this.toggleAddButton(this._optionsData.length > 1 || this._optionsURL);\n        }\n\n        if (filteredArr.length) {\n            this.showOptions();\n            filteredArr[0].selected = true;\n            this._selected = filteredArr[0];\n        } else {\n            this.hideOptions();\n        }\n    }\n\n    this.setFilteredOptions(filteredArr);\n    this._comboList.el.scrollTop = 0;\n\n    function isExactMatch(item) {\n        return item.label.toLowerCase() === text.toLowerCase();\n    }\n}\n\n/**\n * A map of keyCodes to directions\n * @type {Object}\n */\nvar directionMap = { '40': 1, '38': -1 };\n\n/**\n * List keydown handler\n * Changes the selected list item by finding the adjacent item and setting it to selected.\n *\n * @param  {string} type\n * @param  {Event} event\n */\nfunction changeSelected(type, event) {\n    //TODO test mocha\n    var direction = directionMap[event.keyCode];\n\n    if(direction)\n        _changeSelected.call(this, direction);\n}\n\nfunction _changeSelected(direction) {\n    // TODO: refactor and tidy up, looks like some code duplication.\n    var selected = this.el.querySelectorAll('.selected')[0]\n        , scrollPos = this._comboList.el.scrollTop\n        , selectedPos = selected ? selected.offsetTop : 0\n        , relativePos = selectedPos - scrollPos;\n\n    if (selected) {\n        var index = _getDataValueFromElement.call(this, selected)\n            , thisItem = this._filteredOptionsData[index]\n            , adjItem = this._filteredOptionsData[index + direction];\n\n        if (adjItem) {\n            delete thisItem.selected;\n            adjItem.selected = true;\n            this._selected = adjItem;\n            this.update();\n        }\n    } else {\n        if (this._filteredOptionsData[0]) {\n            this._filteredOptionsData[0].selected = true;\n            this.update();\n        }\n    }\n\n    if (relativePos > this._optionsHeight - this._elementHeight*2 && direction === 1)\n        this._comboList.el.scrollTop += this._elementHeight*direction*5;\n\n    if (relativePos < this._elementHeight && direction === -1)\n        this._comboList.el.scrollTop += this._elementHeight*direction*5;\n}\n\n\n/**\n * Mouse over handler\n *\n * @param  {String} type\n * @param  {Event} event\n */\nfunction onMouseOver(type, event) {\n    this._mouseIsOver = true;\n}\n\n\n/**\n * Mouse leave handler\n *\n * @param  {String} type\n * @param  {Event} event\n */\nfunction onMouseLeave(type, event) {\n    var self = this;\n    this._mouseIsOver = false;\n    if (this._mouseOutTimer) clearInterval(this._mouseOutTimer);\n    this._mouseOutTimer = setTimeout(function(){\n        if (!self._mouseIsOver)\n            _onMouseLeave.call(self);\n    }, 750);\n}\n\nfunction _onMouseLeave() {\n    this.hideOptions();\n    this.toggleAddButton(false, { preserveState: true });\n}\n\n\n/**\n * Input click handler\n *\n * @param  {String} type\n * @param  {Event} event\n */\nfunction onInputClick(type, event) {\n    this.showOptions();\n    if (this.__showAddOnClick) this.toggleAddButton(true);\n}\n\n\n/**\n * Enter key handler\n *\n * @param  {String} type\n * @param  {Event} event\n */\nfunction onEnterKey(type, event) {\n    if (event.keyCode == 13) {\n        if (this._selected)\n            _setData.call(this);\n    }\n}\n\n/**\n * Add button handler\n *\n * @param  {String} type\n * @param  {Event} event\n */\nfunction onAddBtn (type, event) {\n    var data = { label: this._comboInput.el.value };\n    this.postMessage('additem', data);\n    this.events.postMessage('milo_supercomboadditem', data);\n    this.toggleAddButton(false, { preserveState: true });\n\n}\n\n/**\n * List click handler\n *\n * @param  {String} type\n * @param  {Event} event\n */\nfunction onListClick (type, event) {\n    var index = _getDataValueFromElement.call(this, event.target);\n    var data = this._filteredOptionsData[index];\n\n    this._selected = data;\n    _setData.call(this);\n    this.update();\n}\n\n\n/**\n * List scroll handler\n *\n * @param  {String} type\n * @param  {Event} event\n */\nfunction onListScroll (type, event) {\n    var scrollPos = event.target.scrollTop\n        , direction = scrollPos > this._lastScrollPos ? 'down' : 'up'\n        , firstChild = this._comboOptions.el.lastElementChild\n        , lastChild = this._comboOptions.el.firstElementChild\n        , lastElPosition = firstChild ? firstChild.offsetTop : 0\n        , firstElPosition = lastChild ? lastChild.offsetTop : 0\n        , distFromLastEl = lastElPosition - scrollPos - this._optionsHeight + this._elementHeight\n        , distFromFirstEl = scrollPos - firstElPosition\n        , elsFromStart = Math.floor(distFromFirstEl / this._elementHeight)\n        , elsToTheEnd = Math.floor(distFromLastEl / this._elementHeight)\n        , totalElementsBefore = Math.floor(scrollPos / this._elementHeight) - BUFFER;\n\n    if ((direction == 'down' && elsToTheEnd < BUFFER)\n        || (direction == 'up' && elsFromStart < BUFFER)) {\n        this._startIndex = totalElementsBefore > 0 ? totalElementsBefore : 0;\n        this._endIndex = totalElementsBefore + MAX_RENDERED;\n        this._elementHeight = firstChild.style.height;\n        this.update();\n    }\n    this._lastScrollPos = scrollPos;\n}\n\n\n/**\n * Private method\n * Retrieves the data-value attribute value from the element and returns it as an index of\n * the filteredOptions\n *\n * @param  {Element} el\n * @return {Number}\n */\nfunction _getDataValueFromElement(el) {\n    return Number(el.getAttribute('data-value')) + this._startIndex;\n}\n\n/**\n * Private method\n * Sets the data of the SuperCombo, taking care to reset some things and temporarily\n * unsubscribe data listeners.\n */\nfunction _setData() {\n    delete this._selected.selected;\n    this.hideOptions();\n    this.toggleAddButton(false);\n    this._comboInput.data.off('', { subscriber: onDataChange, context: this });\n    //supercombo listeners off\n    this.data.set(this._selected);\n    this.data.dispatchSourceMessage(COMBO_CHANGE_MESSAGE);\n    this._comboInput.data.on('', { subscriber: onDataChange, context: this });\n    //supercombo listeners on\n    this._selected = null;\n    this.setFilteredOptions(this._optionsData);\n}\n",
    "'use strict';\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components;\n\n\nvar MLText = Component.createComponentClass('MLText', {\n    data: undefined,\n    events: undefined,\n    dom: {\n        cls: 'ml-ui-text'\n    }\n});\n\ncomponentsRegistry.add(MLText);\n\nmodule.exports = MLText;\n",
    "'use strict';\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components\n    , logger = milo.util.logger;\n\n\nvar MLTextarea = Component.createComponentClass('MLTextarea', {\n    data: undefined,\n    events: undefined,\n    dom: {\n        cls: 'ml-ui-textarea'\n    }\n});\n\ncomponentsRegistry.add(MLTextarea);\n\nmodule.exports = MLTextarea;\n\n\nvar SAMPLE_AUTORESIZE_TEXT = 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit,';\n\n\n_.extendProto(MLTextarea, {\n    startAutoresize: MLTextarea$startAutoresize,\n    stopAutoresize: MLTextarea$stopAutoresize,\n    isAutoresized: MLTextarea$isAutoresized,\n    disable: MLTextarea$disable\n});\n\n\nfunction MLTextarea$startAutoresize(options) {\n    if (this._autoresize)\n        return logger.warn('MLTextarea startAutoresize: autoresize is already on');\n    this._autoresize = true;\n    this._autoresizeOptions = options;\n\n    _adjustAreaHeight.call(this);\n    _manageSubscriptions.call(this, 'on');\n}\n\n\nfunction _manageSubscriptions(onOff) {\n    this.events[onOff]('click', { subscriber: _adjustAreaHeight, context: this });\n    this.data[onOff]('', { subscriber: _adjustAreaHeight, context: this });\n}\n\n\nfunction _adjustAreaHeight() {\n    this.el.style.height = 0;\n\n    var newHeight = this.el.scrollHeight\n        , minHeight = this._autoresizeOptions.minHeight\n        , maxHeight = this._autoresizeOptions.maxHeight;\n\n    newHeight = newHeight >= maxHeight\n                ? maxHeight\n                : newHeight <= minHeight\n                ? minHeight\n                : newHeight;\n\n    this.el.style.height = newHeight + 'px';\n}\n\n\nfunction MLTextarea$stopAutoresize() {\n    if (! this._autoresize)\n        return logger.warn('MLTextarea stopAutoresize: autoresize is not on');\n    this._autoresize = false;\n    _manageSubscriptions.call(this, 'off');\n}\n\n\nfunction MLTextarea$isAutoresized() {\n    return this._autoresize;\n}\n\n\nfunction MLTextarea$destroy() {\n    if (this._autoresize)\n        this.stopAutoresize();\n    Component.prototype.destroy.apply(this, arguments);\n}\n\nfunction MLTextarea$disable(disable) {\n    this.el.disabled = disable;\n}",
    "'use strict';\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components;\n\n\nvar MLTime = Component.createComponentClass('MLTime', {\n    events: undefined,\n    data: {\n        get: MLTime_get,\n        set: MLTime_set,\n        del: MLTime_del,\n    },\n    dom: {\n        cls: 'ml-ui-time'\n    }\n});\n\ncomponentsRegistry.add(MLTime);\n\nmodule.exports = MLTime;\n\n\nvar TIME_REGEX = /^([0-9]{1,2})(?:\\:|\\.)([0-9]{1,2})$/\n    , TIME_TEMPLATE = 'hh:mm';\n\nfunction MLTime_get() {\n    var timeStr = this.el.value;\n    var match = timeStr.match(TIME_REGEX);\n    if (! match) return;\n    var hours = match[1]\n        , mins = match[2];\n    if (hours > 23 || mins > 59) return;\n    var time = new Date(1970, 0, 1, hours, mins);\n\n    return _.toDate(time);\n}\n\n\nfunction MLTime_set(value) {\n    var time = _.toDate(value);\n    if (! time) {\n        this.el.value = '';\n        return;\n    }\n\n    var timeStr = TIME_TEMPLATE\n            .replace('hh', pad(time.getHours()))\n            .replace('mm', pad(time.getMinutes()));\n\n    this.el.value = timeStr;\n    return timeStr;\n\n    function pad(n) {return n < 10 ? '0' + n : n; }\n}\n\n\nfunction MLTime_del() {\n    this.el.value = '';\n}\n",
    "'use strict';\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components;\n\n\nvar MLWrapper = Component.createComponentClass('MLWrapper', {\n    container: undefined,\n    data: undefined,\n    events: undefined,\n    dom: {\n        cls: 'ml-ui-wrapper'\n    }\n});\n\ncomponentsRegistry.add(MLWrapper);\n\nmodule.exports = MLWrapper;\n",
    "'use strict';\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components\n    , componentName = milo.util.componentName\n    , logger = milo.util.logger\n    , check = milo.util.check\n    , Match = check.Match;\n\n\nvar ALERT_CSS_CLASSES = {\n    success: 'alert-success',\n    warning: 'alert-warning',\n    info: 'alert-info',\n    danger: 'alert-danger',\n    fixed: 'alert-fixed'\n};\n\n\nvar MLAlert = Component.createComponentClass('MLAlert', {\n    container: undefined,\n    events: undefined,\n    dom: {\n        cls: ['ml-bs-alert', 'alert', 'fade'],\n        attributes: {\n            'role': 'alert',\n            'aria-hidden': 'true'\n        }\n    },\n    template: {\n        template: '\\\n            {{? it.close }}\\\n                <button ml-bind=\"[events]:closeBtn\" type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">&times;</button>\\\n            {{?}}\\\n            {{= it.message}}'\n    }\n});\n\ncomponentsRegistry.add(MLAlert);\n\nmodule.exports = MLAlert;\n\n\n_.extend(MLAlert, {\n    createAlert: MLAlert$$createAlert,\n    openAlert: MLAlert$$openAlert,\n});\n\n\n_.extendProto(MLAlert, {\n    openAlert: MLAlert$openAlert,\n    closeAlert: MLAlert$closeAlert\n});\n\n\n/**\n * Creates and returns a new alert instance. To create and open at the same time use [openAlert](#MLAlert$$openAlert)\n * `options` is an object with the following properties:\n *\n *      message: string alert message\n *      type:    optional string the type of alert message, one of success, warning, info, danger, fixed\n *               default 'info'\n *      close:   optional false to prevent user from closing\n *               or true (default) to enable closing and render a close button\n *      timeout: optional timer, in milliseconds to automatically close the alert\n *\n * @param {Object} options alert configuration\n */\nfunction MLAlert$$createAlert(options) {\n    check(options, {\n        message: String,\n        type: Match.Optional(String),\n        close: Match.Optional(Boolean),\n        timeout: Match.Optional(Number)\n    });\n\n    var alert = MLAlert.createOnElement();\n\n    options = _prepareOptions(options);\n\n    var alertCls = ALERT_CSS_CLASSES[options.type];\n    alert.dom.addCssClasses(alertCls);\n\n    alert._alert = {\n        options: options,\n        visible: false\n    };\n\n    alert.template.render(options).binder();\n\n    var alertScope = alert.container.scope;\n\n    if (options.close)\n        alertScope.closeBtn.events.on('click',\n            { subscriber: _onCloseBtnClick, context: alert });\n\n    if (options.timeout)\n        var timer = setTimeout(function(){\n            if(alert._alert.visible)\n                alert.closeAlert();\n        }, options.timeout);\n\n    return alert;\n}\n\n\n/**\n * Create and show alert popup\n *\n * @param {Object} options object with message, type, close and timeout\n * @return {MLAlert} the alert instance\n */\nfunction MLAlert$$openAlert(options) {\n    var alert = MLAlert.createAlert(options);\n    alert.openAlert();\n    return alert;\n}\n\n\nfunction _onCloseBtnClick(type, event) {\n    this.closeAlert();\n}\n\n\nfunction _prepareOptions(options) {\n    options = _.clone(options);\n    options.close = typeof options.close == 'undefined' || options.close === true;\n    options.timeout = Math.floor(options.timeout);\n    options.type = options.type || 'info';\n\n    return options;\n}\n\n\n/**\n * Open the alert\n */\nfunction MLAlert$openAlert() {\n    _toggleAlert.call(this, true);\n}\n\n\n/**\n * Close the alert\n */\nfunction MLAlert$closeAlert() {\n    _toggleAlert.call(this, false);\n    this.destroy();\n}\n\n\nfunction _toggleAlert(doShow) {\n    doShow = typeof doShow == 'undefined'\n                ? ! this._alert.visible\n                : !! doShow;\n\n    var addRemove = doShow ? 'add' : 'remove'\n        , appendRemove = doShow ? 'appendChild' : 'removeChild';\n\n    this._alert.visible = doShow;\n\n    document.body[appendRemove](this.el);\n    this.dom.toggle(doShow);\n    this.el.setAttribute('aria-hidden', !doShow);\n    this.el.classList[addRemove]('in');\n    this.el[doShow ? 'focus' : 'blur']();\n}\n",
    "'use strict';\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components\n    , componentName = milo.util.componentName\n    , logger = milo.util.logger\n    , check = milo.util.check\n    , Match = check.Match;\n\n\nvar DEFAULT_BUTTONS = [ { type: 'default', label: 'OK', result: 'OK' } ];\n\nvar CLOSE_OPTIONS = ['backdrop', 'keyboard', 'button'];\n\nvar BUTTON_CSS_CLASSES = { // TODO - use in template\n    default: 'btn-default',\n    primary: 'btn-primary',\n    success: 'btn-success',\n    info: 'btn-info',\n    warning: 'btn-warning',\n    danger: 'btn-danger',\n    link: 'btn-link'\n};\n\n\n/**\n * Dialog class to show custom dialog boxes based on configuration - see [createDialog](#MLDialog$$createDialog) method.\n * Only one dialog can be opened at a time - trying to open another will log error to console. Currently opened dialog can be retrieved using [getCurrentDialog](#MLDialog$$getCurrentDialog) class method.\n */\nvar MLDialog = Component.createComponentClass('MLDialog', {\n    container: undefined,\n    events: undefined,\n    dom: {\n        cls: ['ml-bs-dialog', 'modal', 'fade'],\n        attributes: {\n            'role': 'dialog',\n            'aria-hidden': 'true'\n        }\n    },\n    template: {\n        template: '\\\n            <div class=\"modal-dialog {{= it.cssClass }}\">\\\n                <div class=\"modal-content\">\\\n                    {{? it.title }}\\\n                        <div class=\"modal-header\">\\\n                            {{? it.close.button }}\\\n                                <button ml-bind=\"[events]:closeBtn\" type=\"button\" class=\"close\">&times;</button>\\\n                            {{?}}\\\n                            <h4 class=\"modal-title\">{{= it.title }}</h4>\\\n                        </div>\\\n                    {{?}}\\\n                    {{? it.html || it.text }}\\\n                        <div class=\"modal-body\" ml-bind=\"[container]:dialogBody\">\\\n                            {{? it.html }}\\\n                                {{= it.html }}\\\n                            {{??}}\\\n                                <p>{{= it.text }}</p>\\\n                            {{?}}\\\n                        </div>\\\n                    {{?}}\\\n                    {{? it.buttons && it.buttons.length }}\\\n                        <div class=\"modal-footer\">\\\n                            {{~ it.buttons :btn }}\\\n                                <button type=\"button\"\\\n                                    class=\"btn btn-{{= btn.type }}{{? btn.cls }} {{= btn.cls }}{{?}}\"\\\n                                    ml-bind=\"[events]:{{= btn.name }}\">{{= btn.label }}</button>\\\n                            {{~}}\\\n                        </div>\\\n                    {{?}}\\\n                </div>\\\n            </div>'\n    }\n});\n\ncomponentsRegistry.add(MLDialog);\n\nmodule.exports = MLDialog;\n\n\n_.extend(MLDialog, {\n    createDialog: MLDialog$$createDialog,\n    openDialog: MLDialog$$openDialog,\n    getOpenedDialog: MLDialog$$getOpenedDialog\n});\n\n\n_.extendProto(MLDialog, {\n    openDialog: MLDialog$openDialog,\n    closeDialog: MLDialog$closeDialog,\n    destroy: MLDialog$destroy\n});\n\n\n/**\n * Creates and returns dialog instance. To create and open at the same time [openDialog](#MLDialog$$openDialog)\n * `options` is an object with the following properties:\n *\n *     title: optional dialog title\n *     html: optional dialog text as html (will take precedence over text if both text nd html are passed)\n *       or\n *     text: optional dialog text\n *     close: optional false to prevent backdrop and esc key from closing the dialog and removing close button in top right corner\n *            or true (default) to enable all close options\n *            or object with properties\n *         backdrop: false or true (default), close dialog when backdrop clicked\n *         keyboard: false or true (default), close dialog when esc key is pressed\n *         button: false or true (default), show close button in the header (won't be shown if there is no header when title is not passed)\n *     buttons: optional array of buttons configurations, where each button config is an object\n *         name:   optional name of component, should be unique and should not be `closeBtn`, if not passed a timestamp based name will be used\n *         type:   button type, will determine button CSS style. Possible types are: defult, primary, success, info, warning, danger, link (map to related bootstrap button styles)\n *         label:  button label\n *         close:  optional false to prevent this button from closing dialog\n *         result: string with dialog close result that will be passed to dialog subscriber as the first parameter\n *         data:   any value/object or function to create data that will be passed to dialog subscriber as the second parameter.\n *                 If function is passed it will be called with dialog as context and button options as parameter.\n *\n *     If `title` is not passed, dialog will not have title section\n *     If neither `text` nor `html` is passed, dialog will not have body section.\n *     If `buttons` are not passed, there will only be OK button.\n *\n * When dialog is closed, the subscriber is called with reault and optional data as defined in buttons configurations.\n * If backdrop is clicked or ESC key is pressed the result will be 'dismissed'\n * If close button in the top right corner is clicked, the result will be 'closed' (default result)\n *\n * @param {Object} options dialog configuration\n * @param {Function} initialize function that is called to initialize the dialog\n */\nfunction MLDialog$$createDialog(options, initialize) {\n    check(options, {\n        title: Match.Optional(String),\n        html: Match.Optional(String),\n        text: Match.Optional(String),\n        close: Match.Optional(Match.OneOf(Boolean, {\n            backdrop: Match.Optional(Boolean),\n            keyboard: Match.Optional(Boolean),\n            button: Match.Optional(Boolean)\n        })),\n        buttons: Match.Optional([ {\n            name: Match.Optional(String),\n            type: String,\n            label: String,\n            close: Match.Optional(Boolean),\n            result: Match.Optional(String),\n            data: Match.Optional(Match.Any),\n            cls: Match.Optional(String)\n        } ]),\n        cssClass: Match.Optional(String)\n    });\n\n    var dialog = MLDialog.createOnElement();\n\n    options = _prepareOptions(options);\n    dialog._dialog = {\n        options: options,\n        visible: false\n    };\n\n    dialog.template\n        .render(options)\n        .binder();\n\n    var dialogScope = dialog.container.scope;\n\n    if (options.close.backdrop)\n        dialog.events.on('click',\n            { subscriber: _onBackdropClick, context: dialog });\n\n    if (options.title && options.close.button)\n        dialogScope.closeBtn.events.on('click',\n            { subscriber: _onCloseBtnClick, context: dialog });\n\n    options.buttons.forEach(function(btn) {\n        var buttonSubscriber = {\n            subscriber: _.partial(_dialogButtonClick, btn),\n            context: dialog\n        };\n        dialogScope[btn.name].events.on('click', buttonSubscriber);\n    });\n\n    if (initialize) initialize(dialog);\n    return dialog;\n}\n\n\nfunction _dialogButtonClick(button) {\n    if (button.close !== false)\n        _toggleDialog.call(this, false);\n\n    var data = _.result(button.data, this, button);\n    _dispatchResult.call(this, button.result, data);\n}\n\n\nfunction _dispatchResult(result, data) {\n    var subscriber = this._dialog.subscriber;\n    if (typeof subscriber == 'function')\n        subscriber.call(this, result, data);\n    else\n        subscriber.subscriber.call(subscriber.context, result, data);\n}\n\n\nfunction _onBackdropClick(eventType, event) {\n    if (event.target == this.el)\n        this.closeDialog('dismissed');\n}\n\n\nfunction _onCloseBtnClick() {\n    this.closeDialog('closed');\n}\n\n\nfunction _onKeyDown(event) {\n    if (openedDialog\n            && openedDialog._dialog.options.close.keyboard\n            && event.keyCode == 27) // esc key\n        openedDialog.closeDialog('dismissed');\n}\n\n\nfunction _prepareOptions(options) {\n    options = _.clone(options);\n    options.buttons = _.clone(options.buttons || DEFAULT_BUTTONS);\n    options.buttons.forEach(function(btn) {\n        btn.name = btn.name || componentName();\n    });\n\n    options.close = typeof options.close == 'undefined' || options.close === true\n                        ? _.object(CLOSE_OPTIONS, true)\n                        : typeof options.close == 'object'\n                            ? _.mapToObject(CLOSE_OPTIONS,\n                                function(opt) { return options.close[opt] !== false; })\n                            : _.object(CLOSE_OPTIONS, false);\n\n    return options;\n}\n\n\n/**\n * Create and show dialog popup\n *\n * @param {Object} options object with title, text and buttons. See [createDialog](#MLDialog$$createDialog) for more information.\n * @param {Function|Object} subscriber optional subscriber function or object that is passed result and optional data. Unless context is defined, dialog will be the context.\n */\nfunction MLDialog$$openDialog(options, subscriber, initialize) {\n    var dialog = MLDialog.createDialog(options, initialize);\n    dialog.openDialog(subscriber);\n    return dialog;\n}\n\n\n\nfunction _toggleDialog(doShow) {\n    doShow = typeof doShow == 'undefined'\n                ? ! this._dialog.visible\n                : !! doShow;\n\n    var addRemove = doShow ? 'add' : 'remove'\n        , appendRemove = doShow ? 'appendChild' : 'removeChild';\n\n    this._dialog.visible = doShow;\n\n    if (doShow && ! dialogsInitialized)\n        _initializeDialogs();\n\n    document.body[appendRemove](this.el);\n    if (backdropEl)\n        document.body[appendRemove](backdropEl);\n    this.dom.toggle(doShow);\n    this.el.setAttribute('aria-hidden', !doShow);\n    document.body.classList[addRemove]('modal-open');\n    this.el.classList[addRemove]('in');\n\n    openedDialog = doShow ? this : undefined;\n    this.el[doShow ? 'focus' : 'blur']();\n}\n\n\nvar dialogsInitialized, backdropEl;\n\nfunction _initializeDialogs() {\n    backdropEl = document.createElement('div');\n    backdropEl.className = 'modal-backdrop fade in';\n    document.addEventListener('keydown', _onKeyDown);\n    dialogsInitialized = true;\n}\n\n\nvar openedDialog;\n\n/**\n * Opens dialog instance.\n * Subscriber object should have the same format as the subscriber for the Messenger (although Messenger is not used) - either function or object with subscriber and context properties.\n *\n * @param {Function|Object} subscriber subscriber object\n */\nfunction MLDialog$openDialog(subscriber) {\n    check(subscriber, Match.OneOf(Function, { subscriber: Function, context: Match.Any }));\n\n    if (openedDialog)\n        return logger.warn('MLDialog openDialog: can\\'t open dialog, another dialog is already open');\n\n    this._dialog.subscriber = subscriber;\n    _toggleDialog.call(this, true);\n}\n\n\n/**\n * Closes dialog instance, optionally passing result and data to dialog subscriber.\n * If no result is passed, 'closed' will be passed to subscriber.\n *\n * @param {String} result dialog result, passed as the first parameter to subcsriber\n * @param {Any} data optional dialog data, passed as the second parameter to subscriber\n */\nfunction MLDialog$closeDialog(result, data) {\n    if (! openedDialog)\n        return logger.warn('MLDialog closeDialog: can\\'t close dialog, no dialog open');\n\n    result = result || 'closed';\n\n    _toggleDialog.call(this, false);\n    _dispatchResult.call(this, result, data);\n}\n\n\n/**\n * Returns currently opened dialog\n *\n * @return {MLDialog}\n */\nfunction MLDialog$$getOpenedDialog() {\n    return openedDialog;\n}\n\n\nfunction MLDialog$destroy() {\n    document.removeEventListener('keydown', _onKeyDown);\n    Component.prototype.destroy.apply(this, arguments);\n}\n",
    "'use strict';\n\nvar Component = milo.Component\n    , componentsRegistry = milo.registry.components\n    , logger = milo.util.logger\n    , DOMListeners = milo.util.domListeners;\n\n\nvar TOGGLE_CSS_CLASS = 'dropdown-toggle'\n    , MENU_CSS_CLASS = 'dropdown-menu';\n\n\nvar MLDropdown = Component.createComponentClass('MLDropdown', {\n    events: undefined,\n    dom: {\n        cls: ['ml-bs-dropdown', 'dropdown']\n    }\n});\n\ncomponentsRegistry.add(MLDropdown);\n\nmodule.exports = MLDropdown;\n\n\n_.extendProto(MLDropdown, {\n    start: MLDropdown$start,\n    destroy: MLDropdown$destroy,\n    toggleMenu: MLDropdown$toggleMenu,\n    showMenu: MLDropdown$showMenu,\n    hideMenu: MLDropdown$hideMenu\n});\n\n\nfunction MLDropdown$start() {\n    var toggleEl = this.el.querySelector('.' + TOGGLE_CSS_CLASS)\n        , menuEl = this.el.querySelector('.' + MENU_CSS_CLASS);\n\n    if (! (toggleEl && menuEl))\n        return logger.error('MLDropdown:', TOGGLE_CSS_CLASS, 'or', MENU_CSS_CLASS, 'isn\\'t found');\n\n    var doc = window.document\n        , clickHandler = this.toggleMenu.bind(this, undefined);\n\n    var listeners = new DOMListeners;\n    this._dropdown = {\n        menu: menuEl,\n        visible: false,\n        listeners: listeners\n    };\n    this.hideMenu();\n    var self = this;\n\n    listeners.add(toggleEl, 'click', clickHandler);\n    //maybe only add this events if is open?\n    listeners.add(doc, 'mouseout', onDocOut);\n    listeners.add(doc, 'click', onClick);\n\n\n    function onDocOut(event) {\n        var target = event.target\n            , relatedTarget = event.relatedTarget\n            , listeners = self._dropdown.listeners;\n\n        if (isIframe(target))\n            listeners.remove(target.contentWindow.document, 'click', onClick);\n\n        if (isIframe(relatedTarget))\n            listeners.add(relatedTarget.contentWindow.document, 'click', onClick);\n    }\n\n    function onClick(event) {\n        if (!self.el.contains(event.target))\n            self.hideMenu();\n    }\n}\n\n\nfunction isIframe(el) {\n    return el && el.tagName == 'IFRAME';\n}\n\n\nfunction MLDropdown$destroy() {\n    this._dropdown.listeners.removeAll();\n    delete this._dropdown;\n    Component.prototype.destroy.apply(this, arguments);\n}\n\n\nfunction MLDropdown$showMenu() {\n    this.toggleMenu(true);\n}\n\n\nfunction MLDropdown$hideMenu() {\n    this.toggleMenu(false);\n}\n\n\nfunction MLDropdown$toggleMenu(doShow) {\n    doShow = typeof doShow == 'undefined'\n                ? ! this._dropdown.visible\n                : !! doShow;\n\n    this._dropdown.visible = doShow;\n\n    var menu = this._dropdown.menu;\n    menu.style.display = doShow\n                            ? 'block'\n                            : 'none';\n}\n",
    "'use strict';\n\nif (!(window.milo && window.milo.milo_version))\n    throw new Error('milo is not available');\n\n/**\n * `milo-ui`\n *\n * This bundle will register additional component classes for UI\n */\n\nrequire('./use_components');\n",
    "'use strict';\n\nrequire('./components/Group');\nrequire('./components/Wrapper');\nrequire('./components/Text');\nrequire('./components/Select');\nrequire('./components/Input');\nrequire('./components/InputList');\nrequire('./components/Textarea');\nrequire('./components/RadioGroup');\nrequire('./components/Button');\nrequire('./components/Hyperlink');\nrequire('./components/List');\nrequire('./components/ListItem');\nrequire('./components/Time');\nrequire('./components/Date');\nrequire('./components/Combo');\nrequire('./components/SuperCombo');\nrequire('./components/ComboList');\nrequire('./components/Image');\nrequire('./components/DropTarget');\nrequire('./components/FoldTree');\n\nrequire('./components/bootstrap/Alert');\nrequire('./components/bootstrap/Dialog');\nrequire('./components/bootstrap/Dropdown');\n"
  ]
}